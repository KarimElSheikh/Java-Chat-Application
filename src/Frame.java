import java.awt.Color;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

public class Frame extends java.awt.Frame implements MouseListener {
	
	DataOutputStream out;
	DataInputStream in;
	Socket client;
	String loginName;
	StyledDocument doc;
	SimpleAttributeSet defaultText;
	SimpleAttributeSet blueBoldText;
	SimpleAttributeSet redBoldText;
	boolean loggedIn;
	
	public static int findNthPercSign(String s, int n) {
		for(int i = 0; i < s.length(); i++) {
			if(s.charAt(i) == '%') {
				n--;
				if(n == 0) return i;
			}
		}
		return -1;
	}
	
	public static void composeMessage2(DataOutputStream out, String type, String message) throws IOException {
		out.writeUTF(type+"%" + message);
	}
	
	public static void composeMessage(DataOutputStream out, String type, String sender, String receiver, String message) throws IOException {
	   out.writeUTF(type+"%" + sender+"%" + receiver+"%" + 0+"%" + message);
	}
	
	public static void composeMessage(DataOutputStream out, String type, String sender, String receiver, int ttl, String message) throws IOException {
		out.writeUTF(type+"%" + sender+"%" + receiver+"%" + ttl+"%" + message);
	}
	
	
	public void inFromServer(DataInputStream in) throws IOException, BadLocationException {
		String s;
		while(true) {
		s = in.readUTF();
			if(s.length() >= 3) {
				switch (s.substring(0, 3)) {
					case "MSG":
						doc.insertString(doc.getLength(), s.substring(findNthPercSign(s, 1) + 1, findNthPercSign(s, 2)) + ": " + s.substring(findNthPercSign(s, 4) + 1) + "\n", defaultText );
						break;
					case "LST":
						jList1.setListData(s.substring(findNthPercSign(s, 1) + 1).split("%"));
						break;
					case "NOT":
						// notification
						doc.insertString(doc.getLength(), s.substring(findNthPercSign(s, 1) + 1) + "\n", blueBoldText);
						break;
					case "ACP":
						// Acceptance = You can now login
						loggedIn = true;
						jButton1.setEnabled(true);
						doc.insertString(doc.getLength(), s.substring(findNthPercSign(s, 1) + 1) + "\n", blueBoldText);
                                                setTitle("Login name: " + loginName);
						break;
					default:
						break;
				}
			}
	}
	}
	
	public Frame(Socket client, final DataInputStream in, DataOutputStream out) throws IOException, BadLocationException {
		loggedIn = false;
		this.client = client;
		this.in = in;
		this.out = out;
		initComponents();
		setLocationRelativeTo(null);      // position the window in the center
		jButton1.addMouseListener(this);
		setVisible(true);
		doc = jTextPane1.getStyledDocument(); 
		defaultText = new SimpleAttributeSet(); 
		redBoldText = new SimpleAttributeSet();
		blueBoldText = new SimpleAttributeSet();
		StyleConstants.setForeground(redBoldText, Color.RED);
		StyleConstants.setBold(redBoldText, true);
		StyleConstants.setForeground(blueBoldText, Color.BLUE);
		StyleConstants.setBold(blueBoldText, true);
		
		doc.insertString(doc.getLength(), "Just connected to Server with Address " + client.getRemoteSocketAddress() + "\n", blueBoldText );
		
		Runnable runA = new Runnable() {
			public void run() {
			try {
		inFromServer(in);
			} catch (IOException e) {}
			catch (BadLocationException ex) {}
	}};
	Thread threadA = new Thread(runA, "threadA");
		threadA.start();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();

        setLocationRelativeTo(null);
        setMinimumSize(new java.awt.Dimension(800, 600));
        setName(""); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(jList1);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 470, 200, 120));

        jLabel1.setFont(new java.awt.Font("Lucida Calligraphy", 1, 11)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Online Users");
        jLabel1.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2)), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2)));
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 410, 200, 30));

        jTextField1.setBorder(javax.swing.BorderFactory.createBevelBorder(0, java.awt.Color.cyan, java.awt.Color.blue, java.awt.Color.cyan, java.awt.Color.blue));
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
        });
        add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 413, 580, 170));

        jButton1.setFont(new java.awt.Font("Lucida Calligraphy", 1, 11)); // NOI18N
        jButton1.setText("Refresh");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 440, 200, 30));

        jTextPane1.setMargin(new java.awt.Insets(30, 5, 30, 5));
        jScrollPane1.setViewportView(jTextPane1);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 780, 410));

        pack();
    }// </editor-fold>//GEN-END:initComponents

	/**
	 * Exit the Application
	 */
	private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
            if(out!=null) try {
                    composeMessage2(out, "BYE", "");
                    out.close();
            } catch (IOException ex) {}
            System.exit(0);
	}//GEN-LAST:event_exitForm

	private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
		if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
			if(!loggedIn) {
				try {
					System.out.println("Login name: " + jTextField1.getText());
                                        composeMessage2(out, "JON",  jTextField1.getText()); //join server
					loginName = jTextField1.getText();
				} catch (IOException ex) {}
				jTextField1.setText("");
			}
			else if(jList1.getSelectedValue()==null) {
				try {
					doc.insertString(doc.getLength(), "Error: You didn't choose a recipient to your message\n", redBoldText); //jTextPane1.append("Error: You didn't choose a recipient to your message\n");
				} catch (BadLocationException ex) {}
			}
			else {
				try {
                                        String jTextFieldText = jTextField1.getText();
					composeMessage(out, "MSG", loginName, (String)jList1.getSelectedValue(), 4, jTextFieldText);
                                        doc.insertString(doc.getLength(), "-> " + (String)jList1.getSelectedValue() + ": " + jTextFieldText + '\n', defaultText);

				} catch (IOException | BadLocationException ex) {}
				jTextField1.setText("");
			}
		}
	}//GEN-LAST:event_jTextField1KeyPressed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

	/**
	 * @param args the command line arguments
	 */
	/*public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new Frame().setVisible(true);
			}
		});
	}*/
	
	public void mouseClicked(MouseEvent e) {
		try {
			composeMessage2(out, "LST", loginName);
			jButton1.setEnabled(false);
			Runnable run = new Runnable() {
			public void run() {
				try {
					// Re-enable the "Refresh" button after 2 seconds
					Thread.sleep(2000);
					jButton1.setEnabled(true);
				} catch (Exception e) {}
			}};
			Thread thread = new Thread(run); thread.start();
		} catch (IOException ex) {}
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables

	@Override
	public void mousePressed(MouseEvent e) {
	}

	@Override
	public void mouseReleased(MouseEvent e) {
	}

	@Override
	public void mouseEntered(MouseEvent e) {
	}

	@Override
	public void mouseExited(MouseEvent e) {
	}
}
